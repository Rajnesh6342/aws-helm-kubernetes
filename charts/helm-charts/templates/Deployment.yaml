apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.service.name }}{{ .Values.canary.suffix }}
  labels:
    app: {{ .Values.service.name }}{{ .Values.canary.suffix }}
    version: {{ .Values.image.tag }}
    dot.de/service: {{ .Chart.Name }}
    dot.de/team: {{ .Values.team.name }}
    {{- if .Values.dynatrace.enabled }}
    AppName_Darwin: {{ .Values.dynatrace.labels.appNameDarwin }}
    Operation_Mode: {{ .Values.dynatrace.labels.operationMode }}
    AppNickName: "App Nich name"
    HUB: "Hub Name"
    ICTO-ID: "ICTO-ID" # ICTO-ID
    IncidentAssignmentGroup: "IncidentAssignmentGroup"
    NOR_Model: "NOR_Model"
    OperationTeam: "OperationTeam"
    {{- end }}
  annotations:
    {{- if .Values.dynatrace.enabled }}
    AppName_Darwin: {{ .Values.dynatrace.annotations.appNameDarwin }}
    Operation_Mode: {{ .Values.dynatrace.annotations.operationMode }}
    AppNickName: "App Nich name"
    HUB: "Hub Name"
    ICTO-ID: "ICTO-ID" # ICTO-ID
    IncidentAssignmentGroup: "IncidentAssignmentGroup"
    NOR_Model: "NOR_Model"
    OperationTeam: "OperationTeam"
    {{- end }}
spec:
  {{- if not .Values.keda.enabled }}
  replicas: {{ .Values.environment.replicas.quantity }}
  {{- end }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 2
  selector:
    matchLabels:
      app: {{ .Values.service.name }}{{ .Values.canary.suffix }}
  template:
    metadata:
      labels:
        app: {{ .Values.service.name }}{{ .Values.canary.suffix }}
        version: {{ .Values.image.tag }}
        dot.de/service: {{ .Chart.Name }}
        dot.de/team: {{ .Values.team.name }}
        {{- if .Values.dynatrace.enabled }}
        AppName_Darwin: {{ .Values.dynatrace.labels.appNameDarwin }}
        Operation_Mode: {{ .Values.dynatrace.labels.operationMode }}
        AppNickName: "App Nich name"
        HUB: "Hub Name"
        ICTO-ID: "ICTO-ID" # ICTO-ID
        IncidentAssignmentGroup: "IncidentAssignmentGroup"
        NOR_Model: "NOR_Model"
        OperationTeam: "OperationTeam"
        {{- end }}
      annotations:
         {{- if .Values.dynatrace.enabled }}
        AppName_Darwin: {{ .Values.dynatrace.annotations.appNameDarwin }}
        Operation_Mode: {{ .Values.dynatrace.annotations.operationMode }}
        AppNickName: "App Nich name"
        HUB: "Hub Name"
        ICTO-ID: "ICTO-ID" # ICTO-ID
        IncidentAssignmentGroup: "IncidentAssignmentGroup"
        NOR_Model: "NOR_Model"
        OperationTeam: "OperationTeam"
        {{- end }}
    spec:
      {{- if .Values.serviceAccount.enabled }}
      serviceAccountName: {{ .Values.service.name }}-sa{{ .Values.canary.suffix }}
      {{- end }}
      {{- if .Values.pullsecret.enabled }}
      imagePullSecrets:
        - name: {{ .Values.pullsecret.name }}{{ .Values.canary.suffix }}
      {{- end }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - {{ .Values.service.name }}{{ .Values.canary.suffix }}
              topologyKey: kubernetes.io/hostname
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - {{ .Values.service.name }}{{ .Values.canary.suffix }}
                topologyKey: failure-domain.beta.kubernetes.io/zone
      {{- if .Values.dynatrace.oneagent.enabled }}
      initContainers:
        - name: install-oneagent
          image: alpine:latest
          command:
          - /bin/sh
          args:
          - -c
          - ARCHIVE=$(mktemp) && wget -O $ARCHIVE "$DT_API_URL/v1/deployment/installer/agent/unix/paas/latest?Api-Token=$DT_PAAS_TOKEN&$DT_ONEAGENT_OPTIONS" && unzip -o -d /opt/dynatrace/oneagent $ARCHIVE && rm -f $ARCHIVE
          env:
          - name: DT_API_URL
            value: https://{{ .Values.dynatrace.clientId }}.live.dynatrace.com/api
          - name: DT_PAAS_TOKEN
            value: {{ .Values.dynatrace.paasToken }}
          - name: DT_ONEAGENT_OPTIONS
            value: flavor=musl&include=java
          volumeMounts:
          - mountPath: /opt/dynatrace/oneagent
            name: oneagent
      {{- end }}
      containers:
        - name: {{ .Values.service.name }}{{ .Values.canary.suffix }}
          image: {{ .Values.image.name }}:{{ .Values.image.tag }}
          env:
            {{- if .Values.secretstore.enabled }}
            - name: SECRET_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-test-secret{{ .Values.canary.suffix }}
                  key: password
            {{- end }}
            - name: SPRING_PROFILE
              value: {{ .Values.environment.name }}
            - name: JAVA_ENABLE_DEBUG
              value: {{ .Values.image.debug.enabled | quote }}
            - name: JAVA_DEBUG_PORT
              value: {{ .Values.image.debug.port | toString | quote }}
            - name: JAVA_OPTIONS_EXT
              value: "-Xms{{ .Values.environment.resources.xms }} -Xmx{{ .Values.environment.resources.xmx }} -XX:+AlwaysPreTouch -XX:+UseStringDeduplication -XX:+UseG1GC"
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
          {{- if .Values.image.debug.enabled }}
            - name: debugger
              containerPort: {{ .Values.image.debug.port }}
          {{- end}}
          volumeMounts:
            - name: {{ .Chart.Name }}-config-volume
              mountPath: /home/1001/config
              readOnly: true
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: http
            initialDelaySeconds: 30
            failureThreshold: 15
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: http
            initialDelaySeconds: 30
            failureThreshold: 15
            periodSeconds: 10
          resources:
            requests:
              memory: {{ .Values.environment.resources.requests.memory }}
              cpu: {{ .Values.environment.resources.requests.cpu }}
            limits:
              memory: {{ .Values.environment.resources.limits.memory }}
              cpu: {{ .Values.environment.resources.limits.cpu }}
        - name: jaeger-agent
          image: {{.Values.jaeger.image.name}}:{{ .Values.jaeger.image.version }}
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 1001
            runAsGroup: 1001
          ports:
           - containerPort: 5775
             name: zk-compact-trft
             protocol: UDP
           - containerPort: 5778
             name: config-rest
             protocol: TCP
           - containerPort: 6831
             name: jg-compact-trft
             protocol: UDP
           - containerPort: 6832
             name: jg-binary-trft
             protocol: UDP
           - containerPort: 14271
             name: admin-http
             protocol: TCP
          resources:
            requests:
              memory: 128Mi
              cpu: 100m
            limits:
              memory: 256Mi
              cpu: 200m
          args:
            - --reporter.grpc.host-port={{ .Values.jaeger.host }}
            - --reporter.type=grpc
            - --reporter.grpc.tls.enabled=true
            - --reporter.grpc.tls.skip-host-verify=true

      volumes:
        - name: {{ .Chart.Name }}-config-volume
          configMap:
            name: {{ .Chart.Name }}-configmap{{ .Values.canary.suffix }}
            items:
              - key: application.yaml
                path: application.yaml
      restartPolicy: {{ .Values.image.restartPolicy }}
